"use client";

import Link from "next/link";

export default function Examples() {
  const examples = [
    {
      title: "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä",
      description: "–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ Hello World –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å Go.",
      category: "–û—Å–Ω–æ–≤—ã",
      code: `package main

import "fmt"

func main() {
    fmt.Println("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!")
}`,
      explanation:
        "–≠—Ç–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞. –û–Ω–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–∞–∫–µ—Ç fmt –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Println –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞.",
    },
    {
      title: "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã",
      description: "–†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –≤ Go.",
      category: "–û—Å–Ω–æ–≤—ã",
      code: `package main

import "fmt"

func main() {
    // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    var name string = "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Go"
    var version float64 = 1.21
    
    // –ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    isAwesome := true
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    const pi = 3.14159
    
    fmt.Printf("–Ø–∑—ã–∫: %s\\n", name)
    fmt.Printf("–í–µ—Ä—Å–∏—è: %.2f\\n", version)
    fmt.Printf("–ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π: %t\\n", isAwesome)
    fmt.Printf("–ü–∏: %f\\n", pi)
}`,
      explanation:
        "–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç, –∞ —Ç–∞–∫–∂–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö.",
    },
    {
      title: "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ä–µ–∑–∞–º–∏",
      description: "–†–∞–±–æ—Ç–∞ —Å–æ —Å—Ä–µ–∑–∞–º–∏ - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏ –≤ Go.",
      category: "–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
      code: `package main

import "fmt"

func main() {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–µ–∑–æ–≤
    numbers := []int{1, 2, 3, 4, 5}
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å—Ä–µ–∑
    numbers = append(numbers, 6, 7, 8)
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å—Ä–µ–∑–∞
    subset := numbers[2:5]
    
    fmt.Println("–ò—Å—Ö–æ–¥–Ω—ã–π —Å—Ä–µ–∑:", numbers)
    fmt.Println("–ü–æ–¥—Å—Ä–µ–∑ [2:5]:", subset)
    fmt.Println("–î–ª–∏–Ω–∞:", len(numbers))
    fmt.Println("–Å–º–∫–æ—Å—Ç—å:", cap(numbers))
    
    // –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Å—Ä–µ–∑—É
    for i, value := range numbers {
        fmt.Printf("–ò–Ω–¥–µ–∫—Å: %d, –ó–Ω–∞—á–µ–Ω–∏–µ: %d\\n", i, value)
    }
}`,
      explanation:
        "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å, –∏–∑–º–µ–Ω—è—Ç—å –∏ –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Ä–µ–∑–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ Go.",
    },
    {
      title: "–°—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –º–µ—Ç–æ–¥—ã",
      description:
        "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä –∏ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–∏–ø–æ–≤.",
      category: "–û–û–ü",
      code: `package main

import "fmt"

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
type Person struct {
    Name string
    Age  int
    City string
}

// –ú–µ—Ç–æ–¥ —Å –ø—Ä–∏—ë–º–Ω–∏–∫–æ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
func (p Person) Greet() string {
    return fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, —è %s –∏–∑ %s", p.Name, p.City)
}

// –ú–µ—Ç–æ–¥ —Å –ø—Ä–∏—ë–º–Ω–∏–∫–æ–º –ø–æ —É–∫–∞–∑–∞—Ç–µ–ª—é
func (p *Person) HaveBirthday() {
    p.Age++
}

func main() {
    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    person := Person{
        Name: "–ê–ª–∏—Å–∞",
        Age:  25,
        City: "–ú–æ—Å–∫–≤–∞",
    }
    
    fmt.Println(person.Greet())
    fmt.Printf("–í–æ–∑—Ä–∞—Å—Ç –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: %d\\n", person.Age)
    
    person.HaveBirthday()
    fmt.Printf("–í–æ–∑—Ä–∞—Å—Ç –ø–æ—Å–ª–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: %d\\n", person.Age)
}`,
      explanation:
        "–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –∫ –Ω–∏–º –º–µ—Ç–æ–¥—ã, –ø–æ–∫–∞–∑—ã–≤–∞—è –ø—Ä–∏—ë–º–Ω–∏–∫–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –∏ –ø–æ —É–∫–∞–∑–∞—Ç–µ–ª—é.",
    },
    {
      title: "–ì–æ—Ä—É—Ç–∏–Ω—ã –∏ –∫–∞–Ω–∞–ª—ã",
      description: "–û—Å–Ω–æ–≤—ã –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ —Å –≥–æ—Ä—É—Ç–∏–Ω–∞–º–∏ –∏ –∫–∞–Ω–∞–ª–∞–º–∏.",
      category: "–ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º",
      code: `package main

import (
    "fmt"
    "time"
)

func worker(id int, jobs <-chan int, results chan<- int) {
    for job := range jobs {
        fmt.Printf("–†–∞–±–æ—Ç–Ω–∏–∫ %d –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ %d\\n", id, job)
        time.Sleep(time.Second) // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        results <- job * 2
    }
}

func main() {
    jobs := make(chan int, 100)
    results := make(chan int, 100)
    
    // –ó–∞–ø—É—Å–∫ 3 —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
    for w := 1; w <= 3; w++ {
        go worker(w, jobs, results)
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ 5 –∑–∞–¥–∞–Ω–∏–π
    for j := 1; j <= 5; j++ {
        jobs <- j
    }
    close(jobs)
    
    // –°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for r := 1; r <= 5; r++ {
        result := <-results
        fmt.Printf("–†–µ–∑—É–ª—å—Ç–∞—Ç: %d\\n", result)
    }
}`,
      explanation:
        "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ä—É—Ç–∏–Ω—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É –Ω–∏–º–∏.",
    },
    {
      title: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫",
      description: "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ Go.",
      category: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫",
      code: `package main

import (
    "errors"
    "fmt"
)

func divide(a, b float64) (float64, error) {
    if b == 0 {
        return 0, errors.New("–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å")
    }
    return a / b, nil
}

func main() {
    // –£—Å–ø–µ—à–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
    result, err := divide(10, 2)
    if err != nil {
        fmt.Printf("–û—à–∏–±–∫–∞: %v\\n", err)
    } else {
        fmt.Printf("10 / 2 = %.2f\\n", result)
    }
    
    // –û–ø–µ—Ä–∞—Ü–∏—è —Å –æ—à–∏–±–∫–æ–π
    result, err = divide(10, 0)
    if err != nil {
        fmt.Printf("–û—à–∏–±–∫–∞: %v\\n", err)
    } else {
        fmt.Printf("10 / 0 = %.2f\\n", result)
    }
}`,
      explanation:
        "–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ö–æ–¥ Go –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ —è–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–æ–∫.",
    },
  ];

  const categories = [...new Set(examples.map((example) => example.category))];

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="text-center mb-12">
          <h2 className="text-4xl font-extrabold text-gray-900 dark:text-white">
            –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –Ω–∞ Go
          </h2>
          <p className="mt-4 text-xl text-gray-600 dark:text-gray-400">
            –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            –Ω–∞ Go.
          </p>
        </div>

        {/* Category Filter */}
        <div className="mb-8">
          <div className="flex flex-wrap gap-2 justify-center">
            {categories.map((category) => (
              <span
                key={category}
                className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200"
              >
                {category}
              </span>
            ))}
          </div>
        </div>

        {/* Examples Grid */}
        <div className="space-y-8">
          {examples.map((example, index) => (
            <div
              key={index}
              className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden"
            >
              <div className="p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white">
                    {example.title}
                  </h3>
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
                    {example.category}
                  </span>
                </div>
                <p className="text-gray-600 dark:text-gray-400 mb-6">
                  {example.description}
                </p>

                {/* Code Block */}
                <div className="bg-gray-900 rounded-lg p-4 mb-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm text-gray-400">Go</span>
                    <button
                      onClick={() =>
                        navigator.clipboard.writeText(example.code)
                      }
                      className="text-sm text-blue-400 hover:text-blue-300"
                    >
                      –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
                    </button>
                  </div>
                  <pre className="text-sm text-gray-100 overflow-x-auto">
                    <code>{example.code}</code>
                  </pre>
                </div>

                {/* Explanation */}
                <div className="bg-blue-50 dark:bg-blue-900 rounded-lg p-4">
                  <h4 className="text-sm font-semibold text-blue-900 dark:text-blue-100 mb-2">
                    üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
                  </h4>
                  <p className="text-blue-800 dark:text-blue-200 text-sm">
                    {example.explanation}
                  </p>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Try it out section */}
        <div className="mt-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg p-8 text-center">
          <h3 className="text-2xl font-bold text-white mb-4">
            –ì–æ—Ç–æ–≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —ç—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã?
          </h3>
          <p className="text-blue-100 mb-6">
            –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏—Ö –≤ Go Playground –∏–ª–∏ –≤ –≤–∞—à–µ–π
            –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <a
              href="https://play.golang.org/"
              target="_blank"
              rel="noopener noreferrer"
              className="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-blue-600 bg-white hover:bg-gray-50 transition-colors duration-200"
            >
              Go Playground
              <svg
                className="ml-2 h-4 w-4"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                />
              </svg>
            </a>
            <Link
              href="/tutorials"
              className="inline-flex items-center px-6 py-3 border border-white text-base font-medium rounded-md text-white bg-transparent hover:bg-white hover:text-blue-600 transition-colors duration-200"
            >
              –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –≤ —É—Ä–æ–∫–∞—Ö
            </Link>
          </div>
        </div>
      </main>
    </div>
  );
}
